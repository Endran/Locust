/*
 * Copyright (c) 2015 by David Hardy. Licensed under the Apache License, Version 2.0.
 */

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'

Properties props = new Properties()
try {
    props.load(file('private.properties').newDataInputStream())
} catch (Exception ex) {
}

android {
    compileSdkVersion _compileSdkVersion
    buildToolsVersion _buildToolsVersion

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "nl.endran.locust"
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode _versionCode
        versionName "1.0 (${getDetails()})"
    }

    signingConfigs {
        release {
            storeFile project.rootProject.file('keystore.jks')
            storePassword props.getProperty("storePassword")
            keyAlias props.getProperty("keyAlias")
            keyPassword props.getProperty("keyPassword")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

repositories {
    jcenter()
    maven { url "https://maven.fabric.io/repo" }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:${appCompatVersion}"
    compile "com.android.support:design:${appCompatVersion}"

    compile "com.google.android.gms:play-services-analytics:${playServicesVersion}"
    compile "com.google.android.gms:play-services-ads:${playServicesVersion}"

    compile("com.crashlytics.sdk.android:crashlytics:${crashlyticsVersion}@aar") {
        transitive = true;
    }

    compile "com.google.code.gson:gson:${gsonVersion}"

    compile "com.jakewharton:butterknife:${butterKnifeVersion}"

    compile "com.google.dagger:dagger:${daggerVersion}"
    apt "com.google.dagger:dagger-compiler:${daggerVersion}"
    provided "org.glassfish:javax.annotation:${javaxAnnotationVersion}"

    compile("de.psdev.licensesdialog:licensesdialog:${licenseDialogVersion}") {
        exclude module: 'support-v4'
    }

    debugCompile "com.facebook.stetho:stetho:${stethoVersion}"
    debugCompile "com.facebook.stetho:stetho-urlconnection:${stethoVersion}"

    testCompile "junit:junit:${jUnitVersion}"
}

def getDetails() {
    def details = """git rev-parse --short HEAD""".execute().text.trim()
    def workingBranch = """git rev-parse --abbrev-ref HEAD""".execute().text.trim()
    return details + ' ' + workingBranch
}
